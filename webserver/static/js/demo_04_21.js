// Generated by CoffeeScript 2.3.1
(function() {
  var camera, init, onResize, renderer, scene;

  console.log("demo_4.1 MeshBasicMaterial");

  camera = null;

  scene = null;

  renderer = null;

  init = function() {
    var ambientLight, canvasRenderer, controls, cube, cubeGeometry, cvGui, groundGeom, groundMesh, gui, initStats, meshMaterial, oldContext, plane, planeGeometry, renderScene, spGui, sphere, sphereGeometry, spotLight, stats, step, webGLRenderer;
    // 场景
    scene = new THREE.Scene();
    // 摄像机
    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.x = -20;
    camera.position.y = 50;
    camera.position.z = 40;
    camera.lookAt(new THREE.Vector3(10, 0, 0));
    
    // 渲染器
    webGLRenderer = new THREE.WebGLRenderer();
    webGLRenderer.setClearColor(new THREE.Color(0xEEEEEE, 1.0));
    webGLRenderer.setSize(window.innerWidth, window.innerHeight);
    webGLRenderer.shadowMapEnabled = true;
    canvasRenderer = new THREE.CanvasRenderer();
    canvasRenderer.setSize(window.innerWidth, window.innerHeight);
    renderer = webGLRenderer;
    
    // 地面
    groundGeom = new THREE.PlaneGeometry(100, 100, 4, 4);
    groundMesh = new THREE.Mesh(groundGeom, new THREE.MeshBasicMaterial({
      color: 0x777777
    }));
    groundMesh.rotation.x = -Math.PI / 2;
    groundMesh.position.y = -20;
    scene.add(groundMesh);
    // 圆 方块 平面
    sphereGeometry = new THREE.SphereGeometry(14, 20, 20);
    cubeGeometry = new THREE.BoxGeometry(15, 15, 15);
    planeGeometry = new THREE.PlaneGeometry(14, 14, 4, 4);
    // 材质
    meshMaterial = new THREE.MeshBasicMaterial({
      color: 0x7777ff
    });
    
    // 加入网格的物体由以上两个属性决定
    sphere = new THREE.Mesh(sphereGeometry, meshMaterial);
    cube = new THREE.Mesh(cubeGeometry, meshMaterial);
    plane = new THREE.Mesh(planeGeometry, meshMaterial);
    
    // 加入的位置
    sphere.position.x = 0;
    sphere.position.y = 3;
    sphere.position.z = 2;
    cube.position = sphere.position;
    plane.position = sphere.position;
    scene.add(cube);
    // 光源
    ambientLight = new THREE.AmbientLight(0x0c0c0c);
    scene.add(ambientLight);
    spotLight = new THREE.SpotLight(0xffffff);
    spotLight.position.set(-40, 60, -10);
    spotLight.castShadow = true;
    scene.add(spotLight);
    step = 0;
    oldContext = null;
    // 控制台
    controls = new function() {
      this.rotationSpeed = 0.02;
      this.bouncingSpeed = 0.03;
      this.opacity = meshMaterial.opacity;
      this.transparent = meshMaterial.transparent;
      this.overdraw = meshMaterial.overdraw;
      this.visible = meshMaterial.visible;
      this.side = "front";
      this.color = meshMaterial.color.getStyle();
      this.wireframe = meshMaterial.wireframe;
      this.wireframeLinewidth = meshMaterial.wireframeLinewidth;
      this.wireFrameLineJoin = meshMaterial.wireframeLinejoin;
      this.selectedMesh = "cube";
      this.switchRenderer = function() {
        if (renderer instanceof THREE.WebGLRenderer) {
          renderer = canvasRenderer;
          $("#WebGL-output").empty();
          return $("#WebGL-output").append(renderer.domElement);
        } else {
          renderer = webGLRenderer;
          $("#WebGL-output").empty();
          return $("#WebGL-output").append(renderer.domElement);
        }
      };
      return this;
    };
    
    //控制条UI
    gui = new dat.GUI();
    spGui = gui.addFolder("Mesh");
    spGui.add(controls, "opacity", 0, 1).onChange(function(e) {
      return meshMaterial.opacity = e;
    });
    spGui.add(controls, "transparent").onChange(function(e) {
      return meshMaterial.transparent = e;
    });
    spGui.add(controls, "wireframe").onChange(function(e) {
      return meshMaterial.wireframe = e;
    });
    spGui.add(controls, "wireframeLinewidth", 0, 20).onChange(function(e) {
      return meshMaterial.wireframeLinewidth = e;
    });
    spGui.add(controls, "visible").onChange(function(e) {
      return meshMaterial.visible = e;
    });
    spGui.add(controls, "side", ["front", "back", "double"]).onChange(function(e) {
      switch (e) {
        case "front":
          meshMaterial.side = THREE.FrontSide;
          break;
        case "back":
          meshMaterial.side = THREE.BackSide;
          break;
        case "double":
          meshMaterial.side = THREE.DoubleSide;
      }
      return meshMaterial.needsUpdate = true;
    });
    spGui.addColor(controls, "color").onChange(function(e) {
      return meshMaterial.color.setStyle(e);
    });
    spGui.add(controls, "selectedMesh", ["cube", "sphere", "plane"]).onChange(function(e) {
      scene.remove(plane);
      scene.remove(cube);
      scene.remove(sphere);
      switch (e) {
        case "cube":
          scene.add(cube);
          break;
        case "sphere":
          scene.add(sphere);
          break;
        case "plane":
          scene.add(plane);
      }
      return scene.add(e);
    });
    gui.add(controls, "switchRenderer");
    cvGui = gui.addFolder("Canvas renderer");
    cvGui.add(controls, "overdraw").onChange(function(e) {
      return meshMaterial.overdraw = e;
    });
    cvGui.add(controls, "wireFrameLineJoin", ["round", "bevel", "miter"]).onChange(function(e) {
      return meshMaterial.wireframeLinejoin = e;
    });
    // 实时渲染
    renderScene = function() {
      stats.update();
      cube.rotation.y = step += 0.01;
      plane.rotation.y = step;
      sphere.rotation.y = step;
      requestAnimationFrame(renderScene);
      return renderer.render(scene, camera);
    };
    
    // 状态条
    initStats = function() {
      var stats;
      stats = new Stats();
      stats.setMode(0);
      stats.domElement.style.position = "absolute";
      stats.domElement.style.left = "0px";
      stats.domElement.style.top = "0px";
      $("#Stats-output").append(stats.domElement);
      return stats;
    };
    stats = initStats();
    $("#WebGL-output").append(renderer.domElement);
    return renderScene();
  };

  // 屏幕适配
  onResize = function() {
    console.log("onResize");
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    return renderer.setSize(window.innerWidth, window.innerHeight);
  };

  window.onload = init();

  window.addEventListener("resize", onResize, false);

}).call(this);
