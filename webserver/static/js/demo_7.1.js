// Generated by CoffeeScript 2.3.1
(function() {
  var camera, init, onResize, renderer, scene;

  console.log("demo_7.1  Particles - Only works in CanvasRenderer");

  camera = null;

  scene = null;

  renderer = null;

  init = function() {
    var canvasRenderer, createSprites, initStats, renderScene, stats, step;
    // 场景
    scene = new THREE.Scene();
    
    // 摄像机
    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.x = 0;
    camera.position.y = 0;
    camera.position.z = 150;
    
    // 渲染器
    canvasRenderer = new THREE.WebGLRenderer();
    canvasRenderer.setClearColor(new THREE.Color(0x000000, 1.0));
    canvasRenderer.setSize(window.innerWidth, window.innerHeight);
    renderer = canvasRenderer;
    //创建粒子
    createSprites = function() {
      var i, material, results, sprite, x, y;
      material = new THREE.SpriteMaterial();
      results = [];
      for (x = i = -5; i <= 4; x = ++i) {
        results.push((function() {
          var j, results1;
          results1 = [];
          for (y = j = -5; j <= 4; y = ++j) {
            sprite = new THREE.Sprite(material);
            sprite.position.set(x * 10, y * 10, 0);
            results1.push(scene.add(sprite));
          }
          return results1;
        })());
      }
      return results;
    };
    // 控制条
    // controls = new ()->
    createSprites();
    step = 0;
    // 实时渲染
    renderScene = function() {
      stats.update();
      requestAnimationFrame(renderScene);
      return renderer.render(scene, camera);
    };
    
    // 状态条
    initStats = function() {
      var stats;
      stats = new Stats();
      stats.setMode(0);
      stats.domElement.style.position = "absolute";
      stats.domElement.style.left = "0px";
      stats.domElement.style.top = "0px";
      $("#Stats-output").append(stats.domElement);
      return stats;
    };
    stats = initStats();
    $("#WebGL-output").append(renderer.domElement);
    return renderScene();
  };

  //屏幕适配
  onResize = function() {
    console.log("onResize");
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    return renderer.setSize(window.innerWidth, window.innerHeight);
  };

  window.onload = init();

  window.addEventListener("resize", onResize, false);

}).call(this);
