// Generated by CoffeeScript 2.3.1
(function() {
  var camera, canvas, init, mesh, onResize, renderer, scene;

  console.log("demo_10.231 Canvas texture");

  camera = null;

  scene = null;

  renderer = null;

  mesh = null;

  canvas = document.createElement("canvas");

  document.getElementById("canvas-output").appendChild(canvas);

  $("#canvas-output").literallycanvas({
    imageURLPrefix: "/static/js/libs/literally/img"
  });

  init = function() {
    var ambiLight, controls, createMesh, cube, gui, initStats, light, renderScene, stats, step, webGLRenderer;
    // 场景
    scene = new THREE.Scene();
    
    // 摄像机
    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.x = 0;
    camera.position.y = 12;
    camera.position.z = 28;
    camera.lookAt(new THREE.Vector3(0, 0, 0));
    
    // 渲染器
    webGLRenderer = new THREE.WebGLRenderer();
    webGLRenderer.setClearColor(new THREE.Color(0xEEEEEE, 1.0));
    webGLRenderer.setSize(window.innerWidth, window.innerHeight);
    webGLRenderer.shadowMapEnabled = true;
    renderer = webGLRenderer;
    //灯光
    ambiLight = new THREE.AmbientLight(0x141414);
    scene.add(ambiLight);
    light = new THREE.DirectionalLight();
    light.position.set(0, 30, 20);
    scene.add(light);
    // 方法区
    createMesh = function(geom, texture) {
      var canvasMap, mat;
      canvasMap = new THREE.Texture(canvas);
      mat = new THREE.MeshPhongMaterial();
      mat.map = canvasMap;
      mesh = new THREE.Mesh(geom, mat);
      return mesh;
    };
    // 方块
    cube = createMesh(new THREE.BoxGeometry(10, 10, 10), "floor-wood.jpg");
    cube.position.x = 0;
    scene.add(cube);
    // 控制条
    controls = new function() {
      this.showTexture = true;
      this.showCanvas = function() {
        if (controls.showTexture) {
          return $(".fs-container").show();
        } else {
          return $(".fs-container").hide();
        }
      };
      this.regenerateMap = function() {
        var date, pn;
        date = new Date();
        pn = new Perlin("rnd" + date.getTime());
        fillWithPerlin(pn, ctx);
        cube.material.map.needsUpdate = true;
        return $("#cv").sketch();
      };
      this.applyTexture = function() {
        return cube.material.map.needsUpdate = true;
      };
      return this;
    };
    // UI
    gui = new dat.GUI;
    gui.add(controls, "showTexture").onChange(controls.showCanvas);
    step = 0;
    // 实时渲染
    renderScene = function() {
      stats.update();
      cube.rotation.y += 0.01;
      cube.rotation.x += 0.01;
      cube.material.map.needsUpdate = true;
      requestAnimationFrame(renderScene);
      return renderer.render(scene, camera);
    };
    
    // 状态条
    initStats = function() {
      var stats;
      stats = new Stats();
      stats.setMode(0);
      stats.domElement.style.position = "absolute";
      stats.domElement.style.left = "0px";
      stats.domElement.style.top = "0px";
      $("#Stats-output").append(stats.domElement);
      return stats;
    };
    stats = initStats();
    $("#WebGL-output").append(renderer.domElement);
    return renderScene();
  };

  //屏幕适配
  onResize = function() {
    console.log("onResize");
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    return renderer.setSize(window.innerWidth, window.innerHeight);
  };

  window.onload = init();

  window.addEventListener("resize", onResize, false);

}).call(this);
