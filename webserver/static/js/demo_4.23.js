// Generated by CoffeeScript 2.3.1
(function() {
  var camera, init, onResize, renderer, scene;

  console.log("demo_4.23 MeshDepthMaterial+ BasicMaterial");

  camera = null;

  scene = null;

  renderer = null;

  init = function() {
    var controls, gui, i, initStats, renderScene, stats, step;
    // 场景
    scene = new THREE.Scene();
    
    // 摄像机
    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 10, 130);
    camera.position.x = -50;
    camera.position.y = 40;
    camera.position.z = 50;
    camera.near = 7;
    camera.far = 139;
    camera.lookAt(scene.position);
    
    // 渲染器
    renderer = new THREE.WebGLRenderer();
    renderer.sortObjects = false;
    renderer.setClearColor(new THREE.Color(0x00000, 1.0));
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.shadowMapEnabled = true;
    step = 0;
    // 控制台
    controls = new function() {
      this.cameraNear = camera.near;
      this.cameraFar = camera.far;
      this.rotationSpeed = 0.02;
      this.numberOfObjects = scene.children.length;
      this.color = 0x00ff00;
      this.removeCube = function() {
        var allChildren, lastObject;
        allChildren = scene.children;
        lastObject = allChildren[allChildren.length - 1];
        if (lastObject instanceof THREE.Mesh) {
          scene.remove(lastObject);
          return this.numberOfObjects = scene.children.length;
        }
      };
      this.addCube = function() {
        var colorMaterial, cube, cubeGeometry, cubeMaterial, cubeSize;
        cubeSize = Math.ceil(3 + (Math.random() * 3));
        cubeGeometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize);
        cubeMaterial = new THREE.MeshDepthMaterial();
        colorMaterial = new THREE.MeshBasicMaterial({
          color: controls.color,
          transparent: true,
          blending: THREE.MultiplyBlending
        });
        cube = new THREE.SceneUtils.createMultiMaterialObject(cubeGeometry, [colorMaterial, cubeMaterial]);
        cube.children[1].scale.set(0.99, 0.99, 0.99);
        cube.castShadow = true;
        cube.position.x = -60 + Math.round(Math.random() * 100);
        cube.position.y = Math.round(Math.random() * 10);
        cube.position.z = -100 + Math.round(Math.random() * 150);
        scene.add(cube);
        return this.numberOfObjects = scene.children.length;
      };
      this.outputObjects = function() {
        return console.log(scene.children);
      };
      return this;
    };
    
    //控制条UI
    gui = new dat.GUI();
    gui.addColor(controls, "color");
    gui.add(controls, "rotationSpeed", 0, 0.5);
    gui.add(controls, "addCube");
    gui.add(controls, "removeCube");
    gui.add(controls, "cameraNear", 0, 50).onChange(function(e) {
      return camera.near = e;
    });
    gui.add(controls, "cameraFar", 50, 200).onChange(function(e) {
      return camera.far = e;
    });
    i = 10;
    while (i -= 1) {
      controls.addCube();
    }
    // 实时渲染
    renderScene = function() {
      stats.update();
      scene.traverse(function(e) {
        if (e instanceof THREE.Mesh) {
          e.rotation.x += controls.rotationSpeed;
          e.rotation.y += controls.rotationSpeed;
          return e.rotation.z += controls.rotationSpeed;
        }
      });
      requestAnimationFrame(renderScene);
      return renderer.render(scene, camera);
    };
    
    // 状态条
    initStats = function() {
      var stats;
      stats = new Stats();
      stats.setMode(0);
      stats.domElement.style.position = "absolute";
      stats.domElement.style.left = "0px";
      stats.domElement.style.top = "0px";
      $("#Stats-output").append(stats.domElement);
      return stats;
    };
    stats = initStats();
    $("#WebGL-output").append(renderer.domElement);
    return renderScene();
  };

  //屏幕适配
  onResize = function() {
    console.log("onResize");
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    return renderer.setSize(window.innerWidth, window.innerHeight);
  };

  window.onload = init();

  window.addEventListener("resize", onResize, false);

}).call(this);
